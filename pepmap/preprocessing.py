# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/Preprocessing.ipynb (unless otherwise specified).

__all__ = ['expandProteinIds', 'fastaError', 'pepPositionHelper', 'getPeptidePosition', 'getPTMsites',
           'getModifications', 'formatInputData']

# Cell
import pandas as pd
def expandProteinIds(df):
    df = df.copy(deep=True)
    df.all_protein_ids = df.all_protein_ids.str.split(';')
    res = pd.DataFrame([(d, tup.modified_sequence, tup.naked_sequence) for tup in df.itertuples() for d in tup.all_protein_ids])
    res.columns = ['unique_protein_id','modified_sequence','naked_sequence']
    return res

# Cell
import re
import numpy as np

def fastaError(prot,fasta):
    try:
        fasta[prot]
        return False
    except Exception:
        return True

def pepPositionHelper(seq,prot,fasta):
    if fastaError(prot,fasta):
        start, end = np.NaN, np.NaN
        warnings.warn(f'No matching entry for {prot} in the selected fasta.')
    else:
        search_res = re.search(seq,fasta[prot].sequence)
        if search_res is None:
            start, end = np.NaN, np.NaN
            warnings.warn(f'Peptide sequence {seq} could not be mached to {prot} in the selected fasta.')
        else:
            start, end = search_res.span()
    return start, end-1


# Cell

import warnings

def getPeptidePosition(df, fasta):
    res = df.copy(deep=True)
    res[['start','end']] = res.apply(lambda row: pepPositionHelper(row['naked_sequence'],
                                                                   row['unique_protein_id'],
                                                                   fasta),
                                     axis=1, result_type='expand')

    res_na = res[res.isnull().any(1)]
    prots_na = res_na.unique_protein_id.unique()

    res = res.dropna()
    res['start'] = res['start'].astype(int)
    res['end'] = res['end'].astype(int)
    return res

# Cell
import numpy as np

def getPTMsites(peptide, modification_reg):
    r = re.compile(modification_reg)
    starts=[]
    ends=[]
    for m in r.finditer(peptide):
        starts.append(m.start())
        ends.append(m.end())
    PTM_sites = np.zeros(len(starts))
    for idx in range(0,len(starts)):
        if idx > 0:
            previous_len=previous_len+(ends[idx-1]-starts[idx-1])
        else:
            previous_len=0
        PTM_sites[idx] = starts[idx] - previous_len - 1
    return [int(i) for i in PTM_sites]



# Cell
import re

def getModifications(df, mod_reg):
    res = df.copy(deep=True)
    res['PTMsites'] = res.apply(lambda row: getPTMsites(row['modified_sequence'],
                                                        modification_reg=mod_reg), axis=1)
    res['PTMtypes'] = res.apply(lambda row: re.findall(mod_reg, row['modified_sequence']), axis=1)
    return res

# Cell

def formatInputData(df, fasta, modification_exp):
    res = df.copy(deep=True)
    res = expandProteinIds(res)
    res = getPeptidePosition(res, fasta = fasta)
    res = getModifications(res, mod_reg = modification_exp)
    return res